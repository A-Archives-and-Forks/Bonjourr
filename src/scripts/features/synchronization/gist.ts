import { tradThis } from '../../utils/translations'
import parse from '../../utils/parse'

export async function retrieveGist(token: string, id: string): Promise<Sync.Storage | undefined> {
	type GistGet = { files: { content: string }[] }

	if (!token) {
		throw new Error(GIST_ERROR.TOKEN)
	}

	const req = await fetch(`https://api.github.com/gists/${id}`, {
		headers: gistHeaders(token),
	})

	if (req.status === 200) {
		const gist = (await req.json()) as GistGet
		const content = Object.values(gist?.files ?? {})[0]?.content ?? ''
		return parse(content)
	}
}

export async function sendGist(token: string, id: string | undefined, data: Sync.Storage): Promise<Sync.Storage> {
	const description = 'File automatically generated by Bonjourr. Learn more on https://bonjourr.fr/docs/overview/#sync'
	const files = { 'bonjourr-export.json': { content: JSON.stringify(data, undefined, 2) } }

	// Create

	if (id === undefined) {
		const resp = await fetch('https://api.github.com/gists', {
			body: JSON.stringify({ files, description, public: false }),
			headers: gistHeaders(token),
			method: 'POST',
		})

		if (resp.status === 401) throw new Error(GIST_ERROR.TOKEN)
		if (resp.status >= 300) throw new Error(GIST_ERROR.OTHER)

		const gist = await resp.json()
		id = gist.id

		data.settingssync.gistid = id
		files['bonjourr-export.json'].content = JSON.stringify(data, undefined, 2)
	}

	if (isGistIdValid(id) === false) {
		throw new Error(GIST_ERROR.ID)
	}

	// Update

	const resp = await fetch(`https://api.github.com/gists/${id}`, {
		body: JSON.stringify({ files, description }),
		headers: gistHeaders(token),
		method: 'PATCH',
	})

	if (resp.status === 404) throw new Error(GIST_ERROR.NOGIST)
	if (resp.status === 401) throw new Error(GIST_ERROR.TOKEN)
	if (resp.status >= 300) throw new Error(GIST_ERROR.OTHER)

	data.settingssync.last = new Date().toISOString()

	return data
}

export async function isGistTokenValid(token?: string): Promise<true> {
	if (!token) {
		throw new Error(GIST_ERROR.TOKEN)
	}

	const ISODate = new Date()?.toISOString()
	const resp = await fetch(`https://api.github.com/gists?since=${ISODate}`, {
		headers: gistHeaders(token),
	})

	if (resp.status === 401) throw new Error(GIST_ERROR.TOKEN)
	if (resp.status >= 300) throw new Error(GIST_ERROR.OTHER)

	return true
}

function isGistIdValid(id?: string): boolean {
	if (!id || id.length > 32) {
		return false
	}

	for (let i = 0; i < id.length; i++) {
		const code = id[i].charCodeAt(0)
		const isHex = (code >= 97 && code <= 102) || (code >= 48 && code <= 57)

		if (!isHex) {
			return false
		}
	}

	return true
}

function gistHeaders(token: string) {
	return {
		Authorization: `Bearer ${token}`,
		Accept: 'application/vnd.github+json',
		'X-GitHub-Api-Version': '2022-11-28',
	}
}

const GIST_ERROR = {
	ID: tradThis('Gist id in settings is invalid'),
	TOKEN: tradThis('Invalid authentification token'),
	NOGIST: tradThis('Cannot find bonjourr file in gists'),
	NOCONN: tradThis('Cannot access Github servers right now'),
	OTHER: tradThis('Some Github Gist error happend'),
}
